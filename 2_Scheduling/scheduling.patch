diff --git a/Makefile b/Makefile
index 39a99d7..6978d95 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_dummyproc\
+	$U/_testprocinfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +155,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..303c304 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
 
 // bio.c
 void            binit(void);
@@ -106,6 +107,9 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            updateProc(void);
+void            boostProc(void);
+void            updateProcInfo(struct pstat *);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..e36bb1f 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,7 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+#define DEFAULT_TICKET_COUNT   10
+#define BOOST_INTERVAL  64
+#define TIME_LIMIT_1    1
+#define TIME_LIMIT_2    2
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..0560330 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
@@ -124,6 +125,12 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->currentQueue = 1;
+  p->totalTicket = DEFAULT_TICKET_COUNT;
+  p->curTicket = DEFAULT_TICKET_COUNT;
+  p->totalTime = 0;
+  p->timeAllocated = 0;
+  p->timeUsed = 0;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -169,6 +176,12 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->currentQueue=0;
+  p->totalTicket=0;
+  p->curTicket=0;
+  p->totalTime=0;
+  p->timeAllocated=0;
+  p->timeUsed=0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -320,6 +333,10 @@ fork(void)
 
   acquire(&np->lock);
   np->state = RUNNABLE;
+
+  np->totalTicket = p->totalTicket;
+  np->curTicket = p->curTicket;
+
   release(&np->lock);
 
   return pid;
@@ -434,6 +451,53 @@ wait(uint64 addr)
   }
 }
 
+uint32 randNum = 777;
+
+int
+randNumGenerator()
+{
+  randNum = randNum * 1664525;
+  randNum += 1013904223;
+  return randNum >> 16;
+}
+
+int
+procTicketsSum(void)
+{
+  int ticketTotal = 0;
+  int flag = 0;
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; p++)
+  {
+    acquire(&p->lock);
+    if(p->state == RUNNABLE)
+      if(p->currentQueue == 1)
+      {
+        ticketTotal += p->curTicket;
+        flag = 1;
+      }
+    release(&p->lock);
+  }
+
+  if(flag == 1)  return ticketTotal;
+  else return -1;
+}
+
+void
+assignResetTickets(void)
+{
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; p++)
+  {
+    acquire(&p->lock);
+    if(p->state == RUNNABLE)
+    {
+      p->curTicket = p->totalTicket;
+    }
+    release(&p->lock);
+  }
+}
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -452,22 +516,76 @@ scheduler(void)
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
-    for(p = proc; p < &proc[NPROC]; p++) {
-      acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+    int tmp, tmpTotal;
+    tmpTotal = procTicketsSum();
+    
+    if(tmpTotal == 0)
+    {
+      assignResetTickets();
+      tmpTotal = procTicketsSum();
+    }
+
+    if(tmpTotal > 0)
+    {
+      int rndm = randNumGenerator() % tmpTotal + 1;
+      tmp = 0;
+      int rndm2 = 0;
+      for(p = proc; p < &proc[NPROC]; p++)
+      {
+        acquire(&p->lock);
+        if(p->state == RUNNABLE && p->currentQueue==1)
+          {
+            rndm2 = rndm2 + p->curTicket;
+            if(rndm2 >= rndm)
+            {
+              tmp = 1;
+              p->timeAllocated = TIME_LIMIT_1;
+              p->timeUsed = 0;
+              p->state = RUNNING;
+              c->proc = p;
+
+              swtch(&c->context, &p->context);
+
+              c->proc = 0;
+              if(p->state == RUNNABLE && p->timeUsed >= p->timeAllocated)
+                p->currentQueue = 2;
+            }
+          }
+        release(&p->lock);
+        if(tmp == 1)  break;
+      }
+    }
+
+    else
+    {
+      for(p = proc; p < &proc[NPROC]; p++)
+      {
+        acquire(&p->lock);
+        if(p->state == RUNNABLE && p->currentQueue == 2)
+        {
+          p->timeAllocated = TIME_LIMIT_2;
+          p->timeUsed = 0;
+          p->state = RUNNING;
+          c->proc = p;
+
+          swtch(&c->context, &p->context);
+
+          c->proc = 0;
+            
+          if(p->state == SLEEPING && p->timeUsed < p->timeAllocated)
+            p->currentQueue = 1;
+            
+          if(p->state == RUNNABLE && p->timeUsed >= p->timeAllocated)
+            p->currentQueue = 2;
+
+          }
+        
+        release(&p->lock);
+
+        if(tmpTotal > 0)  break;
       }
-      release(&p->lock);
     }
+
   }
 }
 
@@ -504,6 +622,11 @@ yield(void)
 {
   struct proc *p = myproc();
   acquire(&p->lock);
+  if(p->timeAllocated > p->timeUsed)
+  {
+    release(&p->lock);
+    return;  
+  }
   p->state = RUNNABLE;
   sched();
   release(&p->lock);
@@ -681,3 +804,62 @@ procdump(void)
     printf("\n");
   }
 }
+
+void
+updateProc(void)
+{
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->state == RUNNING){
+      if(p->currentQueue == 1)
+      {
+        p->totalTime++;
+        p->timeUsed++;
+        if(p->curTicket != 0)   p->curTicket--;
+      }
+    }
+    release(&p->lock);
+  }
+}
+
+void
+updateProcInfo(struct pstat *p_stat)
+{
+  int i = 0;
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++)
+  {
+    acquire(&p->lock);
+    
+    p_stat->pid[i] = p->pid;
+
+    if(p->state == UNUSED)
+      p_stat->inuse[i] = 0;
+    else
+      p_stat->inuse[i] = 1;
+
+    p_stat->inQ[i] = p->currentQueue;
+    p_stat->tickets_current[i] = p->curTicket;
+    p_stat->tickets_original[i] = p->totalTicket;
+    p_stat->time_slices[i] = p->totalTime;
+
+    i++;
+
+    release(&p->lock);
+  }
+}
+
+void
+boostProc(void)
+{
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->currentQueue == 2)  p->currentQueue--;
+    release(&p->lock);
+  }
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..464bb11 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -91,6 +91,12 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  int currentQueue;
+  int totalTicket;
+  int curTicket;
+  int totalTime;
+  int timeAllocated;
+  int timeUsed;
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..de941fd
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,12 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+struct pstat {
+int pid[NPROC]; // the process ID of each process
+int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+int inQ[NPROC]; // which queue the process is currently in
+int tickets_original[NPROC]; // the number of tickets each process originally had
+int tickets_current[NPROC]; // the number of tickets each process currently has
+int time_slices[NPROC]; // the number of time slices each process has been scheduled
+};
+#endif // _PSTAT_H_
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..cbfdb87 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets]   sys_settickets,
+[SYS_getpinfo]   sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..edc162b 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets  22
+#define SYS_getpinfo  23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..a090ec4 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "pstat.h"
 
 uint64
 sys_exit(void)
@@ -89,3 +90,33 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_settickets(void)
+{
+  int num_of_Ticket;
+  argint(0, &num_of_Ticket);
+
+  if(num_of_Ticket < 0) return -1;
+  
+  struct proc *p;
+  p = myproc();
+
+  p->totalTicket = num_of_Ticket;
+
+  return 1;
+}
+
+uint64
+sys_getpinfo(void)
+{
+  uint64 address;
+  argaddr(0, &address);
+
+  struct pstat stat_p;
+  updateProcInfo(&stat_p);
+
+  copyout(myproc()->pagetable, address, (char*)&stat_p, sizeof(stat_p));
+
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..0595761 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -165,6 +165,8 @@ clockintr()
 {
   acquire(&tickslock);
   ticks++;
+  updateProc();
+  if(ticks % BOOST_INTERVAL == 0) boostProc();
   wakeup(&ticks);
   release(&tickslock);
 }
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..9feccd4
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,16 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/param.h"
+
+int
+main(int argc , char* argv[]){
+    if(argc == 2){
+        settickets(atoi(argv[1]));
+    }
+    fork();
+    while(1){
+        
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..067b3ee
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,21 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/param.h"
+#include "kernel/pstat.h"
+
+int
+main(int argc , char* agrv[]){
+    struct pstat my_struct;
+    if(argc == 1){
+        printf("PID\tIn Use\tIn Queue\tOriginal Tickets\tCurrent Tickets\tTime Slices\n");
+        //pid,inuse,inQ,ticket_org,ticket_cur,time_slice
+        getpinfo(&my_struct);
+        for(int i = 0 ;  i < NPROC ; i++){
+            if(my_struct.inuse[i] == 1){
+                printf("%d\t  %d\t    %d\t\t      %d\t\t\t%d\t\t%d\n",my_struct.pid[i],my_struct.inuse[i],my_struct.inQ[i],my_struct.tickets_original[i],my_struct.tickets_current[i],my_struct.time_slices[i]);
+            }
+        }
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..64b8048 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d2435c1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
